use cbindgen::{Builder, Config, Language};
use std::env;
use std::path::PathBuf;

fn main() {
    let crate_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
    let output_dir = PathBuf::from(&crate_dir).join("include");
    
    // 确保输出目录存在
    std::fs::create_dir_all(&output_dir).expect("Failed to create include directory");
    
    // 配置 cbindgen
    let mut config = Config::default();
    config.language = Language::C;
    config.header = Some("/* AgentDB Core C API */\n/* Auto-generated by cbindgen */".to_string());
    config.include_guard = Some("AGENT_DB_CORE_H".to_string());
    config.autogen_warning = Some("/* Warning: This file is auto-generated. Do not edit manually. */".to_string());
    config.no_includes = false;
    config.sys_includes = vec!["stdint.h".to_string(), "stdbool.h".to_string(), "stddef.h".to_string()];
    config.includes = vec![];
    
    // 生成 C 头文件
    Builder::new()
        .with_crate(crate_dir)
        .with_config(config)
        .generate()
        .expect("Unable to generate bindings")
        .write_to_file(output_dir.join("agent_state_db.h"));
    
    println!("cargo:rerun-if-changed=src/");
    println!("cargo:rerun-if-changed=build.rs");
    
    // 设置链接库路径
    println!("cargo:rustc-link-search=native=/usr/local/lib");
    
    // 平台特定的链接设置
    if cfg!(target_os = "windows") {
        println!("cargo:rustc-link-lib=ws2_32");
        println!("cargo:rustc-link-lib=advapi32");
        println!("cargo:rustc-link-lib=userenv");
        println!("cargo:rustc-link-lib=ntdll");
        println!("cargo:rustc-link-lib=bcrypt");
    }
}
