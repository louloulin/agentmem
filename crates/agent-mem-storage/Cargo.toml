[package]
name = "agent-mem-storage"
version.workspace = true
edition.workspace = true
authors.workspace = true
license.workspace = true
repository.workspace = true
homepage.workspace = true
documentation.workspace = true
keywords.workspace = true
categories.workspace = true
description = "Storage backends for AgentMem memory platform"

[dependencies]
agent-mem-traits = { path = "../agent-mem-traits" }
agent-mem-utils = { path = "../agent-mem-utils" }
agent-mem-config = { path = "../agent-mem-config" }

# 核心依赖
serde.workspace = true
serde_json.workspace = true
tokio.workspace = true
anyhow.workspace = true
thiserror.workspace = true
async-trait.workspace = true
uuid.workspace = true
chrono.workspace = true
tracing.workspace = true

# 向量存储依赖
# HTTP客户端（用于多个提供商）
reqwest = { version = "0.11", features = ["json"] }

# 向量存储依赖
lancedb = { version = "0.4", optional = true }
arrow = { version = "52", optional = true }

# FAISS 向量搜索 (可选，需要系统级安装)
# faiss = { version = "0.12", optional = true }  # 需要系统级 FAISS 安装
# ndarray = { version = "0.15", optional = true }

# 云端向量存储（使用HTTP客户端实现）
qdrant-client = { version = "1.7", optional = true }
# pinecone-sdk = { version = "0.1", optional = true }  # 版本可能不存在

# 本地存储
sled = { version = "0.34", optional = true }
rocksdb = { version = "0.21", optional = true }

# 内存存储
dashmap = { version = "5.5", optional = true }

# MongoDB 文档存储
mongodb = { version = "2.8", optional = true }
bson = { version = "2.9", optional = true }
futures = { version = "0.3", optional = true }

[dev-dependencies]
tempfile.workspace = true
tokio-test = "0.4"

[features]
default = ["memory"]

# 向量存储后端
azure-ai-search = [] # Azure AI Search 企业级搜索
chroma = []
faiss = [] # 本地高性能向量搜索 (使用内存实现)
lancedb = ["dep:lancedb", "dep:arrow"] # LanceDB 向量数据库
mongodb = ["dep:mongodb", "dep:bson", "dep:futures"] # MongoDB 文档存储
qdrant = ["dep:qdrant-client"] # Qdrant 向量数据库
pinecone = [] # 使用HTTP实现
elasticsearch = [] # 使用HTTP实现
milvus = [] # 使用HTTP实现
redis = [] # Redis 缓存层
supabase = [] # Supabase PostgreSQL + 向量扩展
weaviate = [] # 使用HTTP实现

# 图存储后端
neo4j = [] # 使用HTTP实现
memgraph = [] # 使用HTTP实现

# 本地存储后端
sled = ["dep:sled"]
rocksdb = ["dep:rocksdb"]

# 内存存储
memory = ["dep:dashmap"]

# 所有后端
all-backends = [
    "azure-ai-search", "chroma", "faiss", "lancedb", "mongodb", "qdrant", "pinecone",
    "elasticsearch", "milvus", "redis", "supabase", "weaviate",
    "neo4j", "memgraph",
    "sled", "rocksdb", "memory"
]
