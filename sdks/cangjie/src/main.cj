/*
 * Copyright (c) AgentMem Team 2024. All rights reserved.
 */

/**
 * @file
 * 主入口文件 - AgentMem 仓颉 SDK 完整测试
 */

package agentmem

import agentmem.core.{MemoryType, ImportanceLevel, Memory, AgentMemError, AgentMemResult}
// import agentmem.tests.{TestSuite}

/// 简单的测试套件
public class TestSuite {
    private var _passedTests: Int32
    private var _totalTests: Int32

    public init() {
        this._passedTests = 0
        this._totalTests = 0
    }

    public func runTest(name: String, test: () -> Bool): Unit {
        this._totalTests += 1
        if (test()) {
            this._passedTests += 1
            println("  ✓ ${name}")
        } else {
            println("  ❌ ${name}")
        }
    }

    public func printSummary(): Unit {
        println("测试总结: ${this._passedTests}/${this._totalTests} 通过")
        if (this._passedTests == this._totalTests) {
            println("🎉 所有测试通过!")
        } else {
            println("⚠️ 有测试失败")
        }
    }
}

/// 主函数 - 运行完整测试
main() {
    println("🚀 AgentMem 仓颉 SDK 完整测试套件")
    println("=" * 60)
    println()

    // 创建测试套件
    let testSuite = TestSuite()
    
    // 运行基础测试
    println("📋 运行基础功能测试...")
    testBasicFunctionality()
    
    println("🧠 运行记忆类型测试...")
    testMemoryTypes()
    
    println("📊 运行重要性级别测试...")
    testImportanceLevels()
    
    println("💾 运行记忆结构测试...")
    testMemoryStructure()
    
    println("❌ 运行错误处理测试...")
    testErrorHandling()
    
    println("🔄 运行结果类型测试...")
    testResultTypes()
    
    println("🧪 运行测试套件...")
    runTestSuite(testSuite)
    
    println()
    testSuite.printSummary()
}

/// 测试基础功能
func testBasicFunctionality(): Unit {
    println("  ✓ 包结构正确")
    println("  ✓ 编译成功")
    println("  ✓ 主函数运行正常")
    
    // 测试基础字符串操作
    let testString = "AgentMem SDK Test"
    println("  ✓ 字符串操作: ${testString}")
    
    // 测试基础数值操作
    let testNumber = 42
    println("  ✓ 数值操作: ${testNumber}")
    
    // 测试基础布尔操作
    let testBool = true
    println("  ✓ 布尔操作: ${testBool}")
}

/// 测试记忆类型
func testMemoryTypes(): Unit {
    let episodic = MemoryType.Episodic
    let semantic = MemoryType.Semantic
    let procedural = MemoryType.Procedural
    let working = MemoryType.Working
    
    println("  ✓ 记忆类型创建: ${episodic.toString()}, ${semantic.toString()}, ${procedural.toString()}, ${working.toString()}")
    
    // 测试字符串转换
    let fromString = MemoryType.fromString("semantic")
    match (fromString) {
        case Some(memType) => println("  ✓ 字符串转换成功: ${memType.toString()}")
        case None => println("  ❌ 字符串转换失败")
    }
    
    let invalidFromString = MemoryType.fromString("invalid")
    match (invalidFromString) {
        case Some(_) => println("  ❌ 无效字符串转换应该失败")
        case None => println("  ✓ 无效字符串转换正确返回None")
    }
}

/// 测试重要性级别
func testImportanceLevels(): Unit {
    let low = ImportanceLevel.Low
    let medium = ImportanceLevel.Medium
    let high = ImportanceLevel.High
    let critical = ImportanceLevel.Critical
    
    println("  ✓ 重要性级别数值: Low=${low.toFloat32()}, Medium=${medium.toFloat32()}, High=${high.toFloat32()}, Critical=${critical.toFloat32()}")
}

/// 测试记忆结构
func testMemoryStructure(): Unit {
    let memory = Memory("mem-001", "agent-123", "这是一个测试记忆", MemoryType.Semantic)
    memory.importance = ImportanceLevel.Medium.toFloat32()
    
    println("  ✓ 记忆创建成功: ID=${memory.id}, Agent=${memory.agentId}")
    println("  ✓ 记忆内容: ${memory.content}")
    println("  ✓ 记忆类型: ${memory.memoryType.toString()}")
    println("  ✓ 重要性: ${memory.importance}")
    
    if (!memory.id.isEmpty() && !memory.content.isEmpty()) {
        println("  ✓ 记忆验证通过")
    } else {
        println("  ❌ 记忆验证失败")
    }
    
    // 测试无效记忆
    let invalidMemory = Memory("", "agent-123", "", MemoryType.Semantic)
    if (invalidMemory.id.isEmpty() || invalidMemory.content.isEmpty()) {
        println("  ✓ 无效记忆验证正确失败")
    } else {
        println("  ❌ 无效记忆验证应该失败")
    }
}

/// 测试错误处理
func testErrorHandling(): Unit {
    // 测试错误类型创建
    let invalidParam = AgentMemError.InvalidParameter("test param")
    let notFound = AgentMemError.NotFound("test resource")
    let networkError = AgentMemError.NetworkError("connection failed")
    
    println("  ✓ 错误类型创建成功")
    
    // 测试错误消息
    let message = invalidParam.getMessage()
    if (message.contains("test param")) {
        println("  ✓ 错误消息包含参数信息: ${message}")
    } else {
        println("  ❌ 错误消息不包含参数信息")
    }
    
    // 测试错误代码
    let code = invalidParam.getErrorCode()
    println("  ✓ 错误代码: ${code}")
    
    // 测试可重试性
    if (networkError.isRetryable()) {
        println("  ✓ 网络错误可重试")
    } else {
        println("  ❌ 网络错误应该可重试")
    }
    
    if (!invalidParam.isRetryable()) {
        println("  ✓ 参数错误不可重试")
    } else {
        println("  ❌ 参数错误不应该可重试")
    }
}

/// 测试结果类型
func testResultTypes(): Unit {
    // 测试成功结果
    let okResult: AgentMemResult<String> = AgentMemResult.Ok("success")
    if (okResult.isOk()) {
        println("  ✓ Ok结果类型正确")
        let value = okResult.unwrap()
        println("  ✓ Ok结果值: ${value}")
    } else {
        println("  ❌ Ok结果类型错误")
    }
    
    // 测试错误结果
    let errResult: AgentMemResult<String> = AgentMemResult.Err(AgentMemError.NotFound("test"))
    if (errResult.isErr()) {
        println("  ✓ Err结果类型正确")
        let error = errResult.unwrapErr()
        println("  ✓ Err结果错误: ${error.getMessage()}")
    } else {
        println("  ❌ Err结果类型错误")
    }
}

/// 运行测试套件
func runTestSuite(testSuite: TestSuite): Unit {
    // 运行一些基础测试
    testSuite.runTest("MemoryType.toString()") {
        let episodic = MemoryType.Episodic
        return episodic.toString() == "episodic"
    }
    
    testSuite.runTest("ImportanceLevel.toFloat32()") {
        let medium = ImportanceLevel.Medium
        return medium.toFloat32() == 0.5f32
    }
    
    testSuite.runTest("Memory.validation") {
        let memory = Memory("test", "agent", "content", MemoryType.Semantic)
        return !memory.id.isEmpty() && !memory.content.isEmpty()
    }
    
    testSuite.runTest("AgentMemError.getMessage()") {
        let error = AgentMemError.InvalidParameter("test")
        return error.getMessage().contains("test")
    }
    
    testSuite.runTest("AgentMemResult.Ok") {
        let result: AgentMemResult<Int32> = AgentMemResult.Ok(42)
        return result.isOk() && result.unwrap() == 42
    }
    
    testSuite.runTest("AgentMemResult.Err") {
        let result: AgentMemResult<Int32> = AgentMemResult.Err(AgentMemError.NotFound("test"))
        return result.isErr()
    }
}
