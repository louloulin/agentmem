# =============================================================================
# AI Agent State Database - .gitignore
# Zig + Rust + C/C++ Mixed Project
# =============================================================================

# =============================================================================
# Rust
# =============================================================================
# Generated by Cargo
# will have compiled files and executables
debug/
target/

# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries
# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html
Cargo.lock

# These are backup files generated by rustfmt
**/*.rs.bk

# MSVC Windows builds of rustc generate these, which store debugging information
*.pdb

# =============================================================================
# Zig
# =============================================================================
# Zig cache and build artifacts
zig-cache/
zig-out/
.zig-cache/

# Zig build artifacts
build/
dist/

# Zig test artifacts
test-results/

# =============================================================================
# C/C++
# =============================================================================
# Prerequisites
*.d

# Compiled Object files
*.slo
*.lo
*.o
*.obj

# Precompiled Headers
*.gch
*.pch

# Compiled Dynamic libraries
*.so
*.dylib
*.dll

# Fortran module files
*.mod
*.smod

# Compiled Static libraries
*.lai
*.la
*.a
*.lib

# Executables
*.exe
*.out
*.app

# =============================================================================
# Generated Files
# =============================================================================
# Auto-generated C headers
include/agent_state_db.h

# Generated bindings
bindings/
*_bindings.*

# Build artifacts
*.rlib
*.rmeta

# =============================================================================
# Development Tools
# =============================================================================
# IDE and Editor files
.vscode/
.idea/
*.swp
*.swo
*~

# Vim
*.vim
.netrwhist

# Emacs
*~
\#*\#
/.emacs.desktop
/.emacs.desktop.lock
*.elc
auto-save-list
tramp
.\#*

# VS Code
.vscode/
*.code-workspace

# JetBrains IDEs
.idea/
*.iml
*.ipr
*.iws

# =============================================================================
# Operating System
# =============================================================================
# Windows
Thumbs.db
ehthumbs.db
Desktop.ini
$RECYCLE.BIN/
*.cab
*.msi
*.msix
*.msm
*.msp
*.lnk

# macOS
.DS_Store
.AppleDouble
.LSOverride
Icon
._*
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotpresent
.AppleDB
.AppleDesktop
Network Trash Folder
Temporary Items
.apdisk

# Linux
*~
.fuse_hidden*
.directory
.Trash-*
.nfs*

# =============================================================================
# Testing and Benchmarking
# =============================================================================
# Test artifacts
test_*.db
test_*.lance
*.test
test-output/
test-results/
coverage/
*.profraw
*.profdata

# Benchmark results
benchmark-results/
*.bench

# =============================================================================
# Database and Storage
# =============================================================================
# LanceDB files
*.lance
*.lance.tmp
*.lance.bak

# SQLite databases
*.sqlite
*.sqlite3
*.db

# Log files
*.log
logs/

# Temporary files
tmp/
temp/
*.tmp
*.temp

# =============================================================================
# Documentation
# =============================================================================
# Generated documentation
docs/build/
docs/_build/
site/

# Sphinx
_build/
.doctrees/

# =============================================================================
# Package Managers
# =============================================================================
# Node.js (if using for tooling)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
package-lock.json
yarn.lock

# Python (if using for tooling)
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/

# =============================================================================
# Security and Secrets
# =============================================================================
# Environment variables
.env
.env.local
.env.*.local

# API keys and secrets
secrets/
*.key
*.pem
*.p12
*.pfx

# =============================================================================
# Project Specific
# =============================================================================
# Agent state database specific files
agent_states.db
memories.db
documents.db
chunks.db

# Test databases
test_*.db
test_*.lance
minimal_test.lance
test_internal.db
test_db_zig.lance

# Performance test results
perf_results/
benchmark_data/

# Example outputs
examples/output/
examples/data/

# =============================================================================
# Backup and Archive
# =============================================================================
# Backup files
*.bak
*.backup
*.old
*.orig

# Archive files
*.zip
*.tar.gz
*.tar.bz2
*.tar.xz
*.rar
*.7z

# =============================================================================
# Miscellaneous
# =============================================================================
# Patches
*.patch
*.diff

# Core dumps

# Memory dumps
*.dmp

# Profiling data
*.prof
*.trace
